__version__ = (2, 1, 0)

#           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
#           ‚ñë‚ñë‚ñà‚ñà‚ñà‚ïî‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë
#           ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë
#           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
#                              –ù–ï ¬© Copyright 2022
#                             https://t.me/zeticsce              


# developer of Num: @trololo_1
# meta developer: @zeticsce
from .. import loader, utils  # noqa
import asyncio
import contextlib
import pytz
import re
import telethon
from telethon.tl.types import MessageEntityTextUrl, Message
from telethon.tl.functions.users import GetFullUserRequest
import json as JSON
from telethon.errors.rpcerrorlist import FloodWaitError
from datetime import datetime, date, time
import logging
import types
from ..inline.types import InlineCall

@loader.tds
class BioMod(loader.Module):
    """–í–∞—à–∞ –≤—Ç–æ—Ä–∞—è —Ä—É–∫–∞ –≤ –±–∏–æ–≤–æ–π–Ω–∞—Ö)"""
    strings = {
        
        "name": "Bio",
        
        "not_reply": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ—Ç —Ä–µ–ø–ª–∞—è.",
        
        "not_args": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.",
        
        "nolink": "<emoji document_id=5197248832928227386>üò¢</emoji> –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∂–µ—Ä—Ç–≤—É.",

        "hueta": "ü§î –ß—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?",
        
        "r.save":   
            "<emoji document_id=5212932275376759608>ü¶†</emoji> –ñ–µ—Ä—Ç–≤–∞ <b><code>{}</code></b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
            "<b>‚ò£Ô∏è +{}{}</b> –±–∏–æ-–æ–ø—ã—Ç–∞.",
        
        "search":
            "<emoji document_id=5212932275376759608>‚úÖ</emoji> –ñ–µ—Ä—Ç–≤–∞ <code>{}</code> –ø—Ä–∏–Ω–æ—Å–∏—Ç:\n"
            "<b>‚ò£Ô∏è +{} –±–∏–æ-–æ–ø—ã—Ç–∞.</b>\n"
            "üìÜ –î–∞—Ç–∞: <i>{}</i>",
        
        "nf": "<emoji document_id=5215273032553078755>‚ùé</emoji> –ñ–µ—Ä—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
        
        "no_user": "<emoji document_id=5215273032553078755>‚ùé</emoji> user {} don't exist.",

        "nous": "<emoji document_id=5215273032553078755>‚ùé</emoji> –ñ–µ—Ä—Ç–≤–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",

        "anf": "<emoji document_id=5215329773366025981>ü§î</emoji> –∞ –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å?..",

        "aicmd":
            "<b>ü•∑üèª</b> <a href='tg://openmessage?user_id={}'>{}</a>\n"
            "<b>üÜî:</b> <code>@{}</code>",
        "myid": "<b>My üÜî:</b> <code>@{}</code>",
        

        "guidedov":    
            "<b>‚ùî –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∫—É:</b>\n"
            "\n<b>{0}</b>  <code>–±–µ–π</code> | <code>–∫—É—Å</code>[—å–∞–π–Ω–∏] | <code>–∑–∞—Ä–∞–∑–∏</code>[—Ç—å—Ç—å] " # üîΩ
            "| <code>–µ–±</code>[–Ω–∏–∞–∂—à—å] | <code>—É–µ–±</code>[–∂–∏–∞–æ—à—Ç—å] [1-10] (@id|@user|link)"
            "\n<b>{0}</b>  <code>—Ü–µ–Ω</code>[–∞—É] | <code>–≤—á</code>[–µ–∫]  <i>(—Ü–µ–Ω–∞ –≤–∞–∫—Ü–∏–Ω—ã)</i>"
            "\n<b>{0}</b>  <code>–≤–∞–∫</code>[—Ü–∏–Ω–∞—É] | <code>–ª–µ—á</code>[–∏—Å—å] | <code>—Ö–∏</code>[–ª–ª—å—Å—è–π–∏–Ω–≥] | <code>–ª–µ–∫</code>[–∞—Ä—Å—Ç–≤–æ]"
            "\n<b>{0}</b>  <code>–∂–µ—Ä—Ç–≤</code>[—ã–∞—É] | <code>–µ–∂</code>[–∞—É]"
            "\n<b>{0}</b>  <code>–±–æ–ª</code>[–µ–∑—å–Ω–∏]"
            "\n<b>{0}</b>  <code>#–ª–∞–±</code>[—É–∞] | <code>%–ª–∞–±</code>[—É–∞] | <code>/–ª–∞–±</code>[—É–∞]"
            "\n<b>{0}</b>  <code>—É–≤–µ–¥</code>[—ã–∞–æ–º–ª–µ–Ω–∏—è]  <i>(+–≤–∏—Ä—É—Å—ã)</i>"
            "\n<b>{0}</b>  <code>-–≤–∏—Ä—É—Å</code>[—ã–∞]\n\n"
            "„ÄΩÔ∏è <b>–ê–ø–≥—Ä–µ–π–¥ –Ω–∞–≤—ã–∫–æ–≤:</b>\n"
            "<b>{0}  –Ω–∞–≤—ã–∫ (0-5)</b> –∏–ª–∏\n<b>{0}  —á–µ–∫ –Ω–∞–≤—ã–∫ (0-5)</b>\n"
            "<i> –ù–∞–ø—Ä–∏–º–µ—Ä: <b>{0} –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è 4</b>\n" 
            "(—É–ª—É—á—à–∞–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —É—á—ë–Ω–Ω—ã—Ö –Ω–∞ 4 —É—Ä.)</i>\n\n"    
            "„ÄΩÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
            "üß™ –ü–∞—Ç–æ–≥–µ–Ω (<b>–ø–∞—Ç</b> [–æ–≥–µ–Ω—ã])\nüë®‚Äçüî¨ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è (<b>–∫–≤–∞–ª</b> [–∏—Ñ–∏–∫–∞—Ü–∏—è—É–ª–∞] | <b>—Ä–∞–∑—Ä–∞–±</b> [–æ—Ç–∫–∞—É])\n"
            "ü¶† –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å (<b>–∑–∑</b> | <b>–∑–∞—Ä–∞–∑</b> [–∞–Ω–æ—Å—Ç—å–∫—É])\nüõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç (<b>–∏–º–º—É–Ω</b> [–∏—Ç–µ—Ç–∫–∞—É])\n"
            "‚ò†Ô∏è –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å (<b>–ª–µ—Ç–∞–ª</b> [—å–Ω–æ—Å—Ç—å–∫–∞—É])\nüïµÔ∏è‚Äç‚ôÇÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (<b>—Å–±</b> | <b>—Å–ª—É–∂–±</b> [–∞—É] | <b>–±–µ–∑–æ–ø–∞—Å–Ω–æ</b> [—Å—Ç—å])\n\n"
            "<b>üîé –ü–æ–∏—Å–∫ –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ:</b>\n"
            "<b>{0}  –∑–∑ [ @id ]</b> –∏–ª–∏\n"
            "<b>{0}  –∂ [ —Ä–µ–ø–ª–∞–π ]</b>"
            "                —Å–º. <code>{1}config bio</code>",

        "dov": 
            "<b>üåò <code>{5}–î–æ–≤ —Å–µ—Ç</code> [ id|—Ä–µ–ø–ª–∞–π ]</b> --- <b>–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞.</b>\n"
            "<i>   ‚ú® –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</i>\n"
            "{0}\n\n"
            "<b>üåò <code>{5}–î–æ–≤ –Ω–∏–∫</code> –Ω–∏–∫</b> --- <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫</b>.\n <i>–ù–∞–ø—Ä–∏–º–µ—Ä: <b><code>.–î–æ–≤ –Ω–∏–∫ {3}</code></b></i>.\n"
            "<b>   üî∞ –í–∞—à –Ω–∏–∫: <code>{1}</code></b>\n\n"
            "<b>üåò <code>{5}–î–æ–≤ –ø—É—Å–∫</code></b> --- <b>–ó–∞–ø—É—Å—Ç–∏—Ç—å/–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b>.\n"
            "<b>   {2}</b>\n"
            "<i><b>–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –∫:</b></i>\n{4}",

        "user_rm": "‚ùé –°–∞–ø–ø–æ—Ä—Ç <b><code>{}</code></b> —É–¥–∞–ª—ë–Ω.",
        "user_add": "<emoji document_id=5212932275376759608>‚úÖ</emoji> –°–∞–ø–ø–æ—Ä—Ç <b><code>{}</code></b> –¥–æ–±–∞–≤–ª–µ–Ω!",
        "wrong_nick": "<b>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫.</b>",
        "nick_add": "üî∞ –ù–∏–∫ <b>{}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        "dov_start": "<b><emoji document_id=5212932275376759608>‚úÖ</emoji> –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</b>",
        "dov_stop": "<b>‚ùé –£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</b>",
        "dov.wrong_args": 
            "<b><emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.</b>\n"
            "<i>üìù –í–≤–µ–¥–∏—Ç–µ <code>.–¥–æ–≤</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.</i>",   
        "wrong_id": "üëÄ –ü—Ä–∞–≤–∏–ª—å–Ω–æ üÜî –≤–≤–µ–¥–∏, –¥—É–±–∏–Ω–∞.",
        "ex": "‚ùé –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: <code>{}</code>",
        "wrong_ot-do": '<emoji document_id=5215273032553078755>‚ùå</emoji> –µ–±–ª–∞–Ω, –ò—Å–ø–æ–ª—å–∑—É–π <b>–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> —Ñ—É–Ω–∫—Ü–∏—é "–æ—Ç-–¥–æ".',
        "no_sargs": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.",
        "no_link": "<emoji document_id=5215273032553078755>‚ùå</emoji> –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
        "too_much_args": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ö–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ <b>–±–æ–ª—å—à–µ</b> –æ–¥–Ω–æ–≥–æ, –ª–∏–±–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è <b>–Ω–µ</b> —Å–æ –∑–Ω–∞–∫–∞ <code>@</code>",
        "no_zar_reply": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Ä–∏—Å–∞ –æ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏.",
        "empty_zar": "<emoji document_id=5215273032553078755>‚ùå</emoji> –°–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç.",
        "wrong_zar_reply": '<emoji document_id=5215273032553078755>‚ùå</emoji> –†–µ–ø–ª–∞–π <b>–Ω–µ</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Ä–∏—Å–∞ –æ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"',
        "wrong_cmd": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        "empty_ex": "<emoji document_id=5215273032553078755>‚ùå</emoji> C–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.",
        "tids": "<b><emoji document_id=5212932275376759608>‚úÖ</emoji> Id'—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã.</b>",
        "tzar": "<emoji document_id=5212932275376759608>‚úÖ</emoji> –ó–∞—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.",
        "clrex": "‚ùé –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –æ—á–∏—â–µ–Ω.",
        "zar_rm": "‚ùé –ñ–µ—Ä—Ç–≤–∞ <b><code>{}</code></b> —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
        "exadd": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.",
        "exrm": "‚ùé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> —É–¥–∞–ª–µ–Ω.",
        "clrzar": "‚úÖ –ó–∞—Ä–ª–∏—Å—Ç <b>–æ—á–∏—â–µ–Ω</b>.",
        "guide":
            "<b>–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é BioHelper:</b>\n\n"
            "<code>{}biohelp –¥–æ–≤</code> üëà –ü–æ–º–æ—â—å –ø–æ –¥–æ–≤–µ—Ä–∫–µ"

    }
    async def client_ready(self, client, db):
        self.db = db
        self.client = client #IDS
        if not self.db.get("NumMod", "exUsers", False):
            self.db.set("NumMod", "exUsers", [])
        if not self.db.get("NumMod", "infList", False):
            self.db.set("NumMod", "infList", {})
#### Module: IDS by @Not_Toxa
    async def actions(self, reply, args):
        if reply:
            user_id = reply.sender_id
            return {
                "user_id": user_id,
                "firstname": (
                    await self.client.get_entity(user_id)
                ).first_name
            }
        elif len(args) == 1:
            if args[0].isdigit():
                args[0] = int(args[0])
            entity = await self.client.get_entity(args[0])
            return {
                "user_id": entity.id,
                "firstname": entity.first_name
            }
    async def –∞–πcmd(self, message):
        """[reply]\n–ü–æ–ª—É—á–∞–µ—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–ø–ª–∞—é."""
        reply = await message.get_reply_message()
        vlad = message.sender_id
        args = utils.get_args(message)
        user_info = await self.actions(reply, args)
        if not reply:
            return await message.edit(
                self.strings("myid").format(
                    vlad
                )
            )
        await message.edit(
            self.strings("aicmd").format(
                user_info["user_id"], user_info["firstname"], user_info["user_id"]
            )
        )
### Module Num by trololo_1
    async def –∑cmd(self, message):
        " [arg] [arg] [arg]....\n –í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏.\n(–±–µ–∑ –Ω–∏—Ö –±—å–µ—Ç –ø–æ –æ—Ç–≤–µ—Ç—É —Å 10 –ø–∞—Ç–æ–≤)"
        reply = await message.get_reply_message()
        exlist = self.db.get("NumMod", "exUsers")
        count_st = 0
        count_hf = 0
        
        if not reply or not reply and not args:
            await message.reply(
                self.strings("not_reply")
            )
            return
        
        
        list_args = []
        args = utils.get_args_raw(message)
        if not args:
            vlad = reply.sender_id
            await message.reply(
                f'<code>/–∑–∞—Ä–∞–∑–∏—Ç—å 10 @{vlad}<code>\n—Å–ø–∞—Å–∏–±–æ <emoji document_id=5215327827745839526>‚ù§Ô∏è</emoji>'
            )
            return
        for i in args.split(' '):
            if '-' in i:
                ot_do = i.split('-')
                try:
                    list_args.extend(str(x) for x in range(int(ot_do[0]), int(ot_do[1]) + 1))
                except Exception:
                    await message.reply(
                        self.strings("wrong_ot-do")
                    )
                    return
            else:
                list_args.append(i)
        a = reply.text
        lis = a.splitlines()
        for start in list_args:
            for x in lis:
                if x.lower().startswith(str(start.lower())):
                    count_st = 1
                    if 'href="' in x:
                        count_hf = 1
                        b = x.find('href="') + 6
                        c = x.find('">')
                        link = x[b:c]
                        if link.startswith('tg'):
                            users = '@' + link.split('=')[1]
                            if users in exlist:
                                await message.reply(
                                    self.strings("ex").format(
                                    users
                                    )
                                )
                            else:
                                await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {users}')
                        elif link.startswith('https://t.me'):
                            a = '@' + str(link.split('/')[3])
                            if a in exlist:
                                await message.reply(
                                    self.strings("ex").format(
                                    a
                                    )
                                )
                            else:
                                await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {a}')
                        else:
                            await message.reply(
                                self.strings("hueta")
                            )
                        break
            await asyncio.sleep(3.3)   
        if not count_st:
            await message.reply(
                self.strings("no_sargs")
            )
        elif not count_hf:
            await message.reply(
                self.strings("no_link")
            )
        elif len(list_args) >= 5:
            await message.reply(
                self.strings("tzar")
            )
    async def –æcmd(self, message):
        """–ó–∞—Ä–∞–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–æ —Ä–µ–ø–ª–∞—é.\n–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å @id/@user/link"""
        reply = await message.get_reply_message()
        exlist = self.db.get("NumMod", "exUsers")
        err = "1"
        if not reply:
            await message.reply(
                self.strings("not_reply")
            )
            return
        json = JSON.loads(reply.to_json())
        try:
            for i in range(len(reply.entities)):
                try:
                    link = json["entities"][i]["url"]
                    if link.startswith('tg'):
                        users = '@' + link.split('=')[1]
                        if users in exlist:
                            await message.reply(
                                    self.strings("ex").format(
                                    users
                                    )
                                )
                        else:
                            await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {users}')
                    elif link.startswith('https://t.me'):
                        a = '@' 
                        if a in exlist:
                            await message.reply(
                                    self.strings("ex").format(
                                    a
                                    )
                                )
                        else:
                            await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {a}')
                    else:
                        await message.reply(
                            self.strings("hueta")
                        )
                except Exception:
                    blayt = reply.raw_text[json["entities"][i]["offset"]:json["entities"][i]["offset"] + json["entities"][i]["length"]]
                    if blayt in exlist:
                        await message.reply(
                            self.strings("ex").format(
                                blayt
                                )
                            )
                    else:
                        await message.reply("/–∑–∞—Ä–∞–∑–∏—Ç—å " + blayt)
                await asyncio.sleep(3.3)
        
        except TypeError:
            err = "2"
            await message.edit(
                self.strings("hueta")
            )
        if err != "2":
            await message.delete()
    async def –∏—Å–∫cmd(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥ .–∑ –∏ .–æ\n–ò—Å–ø–æ–ª—å–∑—É–π: .–∏—Å–∫ {@user/@id/reply}"""
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        exlistGet = self.db.get("NumMod", "exUsers")
        exlist = exlistGet.copy()
        if not args:
            #if reply:
            #    rid = "@" + str(reply.sender_id)


            if len(exlist) < 1:
                await message.reply(
                    self.strings("empty_zar")
                )
                return
            exsms = ''.join(f'<b>{count}.</b> <code>{i}</code>\n' for count, i in enumerate(exlist, start=1))
            await utils.answer(message, exsms)
            return
        #if reply:
        if args == 'clear':
            exlist.clear()
            self.db.set("NumMod", "exUsers", exlist)
            await message.reply(
                self.strings("clrex")
            )
            return
        if len(args.split(' ')) > 1 or args[0] != '@':
            await message.reply(
                self.strings("too_much_args")
            )
            return
        if args in exlist:
            exlist.remove(args)
            self.db.set("NumMod", "exUsers", exlist)
            await message.edit(
                self.strings("exrm").format(
                    args
                )
            )
            return
        exlist.append(args)
        self.db.set("NumMod", "exUsers", exlist)
        await message.edit(
            self.strings("exadd").format(
                args
            )
        )
    async def –∑–∞—Äcmd(self, message):
        """ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π.\n.–∑–∞—Ä {@id/user} {count} {args}\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: .–∑–∞—Ä {@id/user}\n–ê—Ä–≥—É–º–µ–Ω—Ç—ã:\n–∫ -- –¥–æ–±–∞–≤–∏—Ç—å –±—É–∫–≤—É k(—Ç—ã—Å—è—á) –∫ —á–∏—Å–ª—É.\n—Ñ -- –ø–æ–∏—Å–∫ –ø–æ –∏–¥'—É/—é–∑–µ—Ä—É.\n—Ä -- –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ —Ä–µ–ø–ª–∞—é. """
        args = utils.get_args_raw(message)
        infList = self.db.get("NumMod", "infList")
        timezone = "Europe/Kiev"
        vremya = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
        k = ''
        with contextlib.suppress(Exception):
            args_list = args.split(' ')
        ###
        if not args:
            if not infList:
                await message.edit(
                    self.strings("empty_zar")
                )
                return
            sms = ''.join(
                f'<b>‚Ä¢ <code>{key}</code>  <code>{value[0]}</code> [<i>{value[1]}</i>]</b>\n' for key, value in
                infList.items())
            await utils.answer(message, sms)
            return
        ##
        ###
        if '—Ä' in args.lower():
            reply = await message.get_reply_message()
            
            if not reply:
                return await message.reply(
                    self.strings("no_zar_reply")
                )
            ##

            trueZ = '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é'
            trueZ2 = '–ø–æ–¥–≤–µ—Ä–≥–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' # –¥–∞, —è –µ–±–ª–∞–Ω)
            text = reply.text
            if trueZ not in reply.text and trueZ2 not in reply.text:
                await message.reply(
                    self.strings("wrong_zar_reply")
                )
            else:  # ‚ò£
                try:
                    ept = ""
                    text = reply.text
                    x = text.index('‚ò£') + 4
                    count = text[x:].split(' ', maxsplit=1)[0]
                    x = text.index('user?id=') + 8
                    user = '@' + text[x:].split('"', maxsplit=1)[0]
                    infList[user] = [str(count), vremya]
                    self.db.set("NumMod", "infList", infList)
                    await message.reply(
                        self.strings("r.save").format(
                            user, count, ept
                        )
                    )
                except ValueError:
                    await message.reply(
                        self.strings("nolink")
                    )
        elif args_list[0] == "clear84561":
            infList.clear()
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("clrzar")
            )

        elif '—Ñ' in args.lower():
            reply = await message.get_reply_message()

            if not reply:            
            
                if re.fullmatch(r"@\d{3,10}", args_list[0], flags=re.ASCII):
                    zhertva = args_list[0]

                if re.fullmatch(r"@\D\w{3,32}", args_list[0], flags=re.ASCII):
                    try:
                        get_id = await message.client.get_entity(args_list[0])
                        get_id = get_id.id
                        zhertva = "@" + str(get_id)
                    except:
                        return await message.reply(
                            self.strings("no_user").format(
                                args_list[0]
                            )
                        ) 

                if zhertva in infList:
                    user = infList[zhertva]
                    await message.reply(
                        self.strings("search").format(
                            zhertva, user[0], user[1]
                        )
                    )
                if zhertva not in infList:   
                    await message.reply(
                        self.strings("nf")
                    )  

            if reply: # <- –∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ñ–∏–∫—Å–∞ UnboundLocalError: local variable 'reply' ...
                rid = '@' + str(reply.sender_id)

                zhertva = "R#C*N("

                if re.fullmatch(r"@\d{3,10}", args_list[0], flags=re.ASCII):
                    zhertva = args_list[0]

                if re.fullmatch(r"@\D\w{3,32}", args_list[0], flags=re.ASCII):
                    try:
                        get_id = await message.client.get_entity(args_list[0])
                        get_id = get_id.id
                        zhertva = "@" + str(get_id)
                    except:
                        return await message.reply(
                            self.strings("no_user").format(
                                args_list
                            )
                        )                


                if zhertva in infList:
                    user = infList[zhertva]
                    await message.reply(
                        self.strings("search").format(
                            zhertva, user[0], user[1]
                        )
                    )                             
                elif rid in infList:
                    user = infList[rid]
                    await message.reply(
                        self.strings("search").format(
                            rid, user[0], user[1]
                        )
                    )              
                        
                elif rid not in infList:
                        await message.reply(
                            self.strings("nf")
                        )
        elif len(args_list) == 1 and args_list[0] in infList:
            infList.pop(args_list[0])
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("zar_rm").format(
                    args
                )
            )

        else:
            k = ''
            pas = 0
            try:
                user, count = str(args_list[0]), float(args_list[1])
            except Exception:
                try:
                    if "–∫" in args_list[1] or "k" in args_list[1]:
                        user = str(args_list[0])
                        args = str(args_list[1])
                        len_args = len(args_list[1])
                        count = args[:len_args-1]
                        count = float(count)
                        k += 'k'
                        pas = 1
                except: 
                    return await message.reply(
                        self.strings("wrong_cmd")
                    )                
            if re.fullmatch(r"@\D\w{3,32}", user, flags=re.ASCII):
                try:
                    get_id = await message.client.get_entity(user)
                    get_id = get_id.id
                    user = "@" + str(get_id)
                except:
                    pass              
            if '–∫' in args.lower() and pas == 0 or 'k' in args.lower() and pas == 0:
                k += "k"     
            infList[user] = [str(count) + k, vremya]
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("r.save").format(
                            user, count, k
                )
            )
    
    async def –¥–æ–≤cmd(self, message):
        """ {args1} {args2 OR reply} \n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        filter_and_users = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
        wnik = await self._client(GetFullUserRequest(message.sender_id))
        ent = wnik.users[0]
        a = self.config
        pref = self.get_prefix()
        dovs = ""
        if a["–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ"]:
            dovs += "–ª–∞–±–µ, "
        if a["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º"]:
            dovs += "–∑–∞—Ä–∞–∂–µ–Ω–∏—è–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ"]:
            dovs += "–ø—Ä–æ–∫–∞—á–∫–∞–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–ª–∏—Å—Ç—É"]:
            dovs += "–∑–∞—Ä–ª–∏—Å—Ç—É, "        
        if a["–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º"]:
            dovs += "–∂–µ—Ä—Ç–≤–∞–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º"]:
            dovs += "–±–æ–ª–µ–∑–Ω—è–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –≤–∏—Ä—É—Å–∞–º"]:
            dovs += "—É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∏—Ä—É—Å–æ–≤, "
        if a["–î–æ—Å—Ç—É–ø –∫ —Ö–∏–ª–ª–∏–Ω–≥—É"]:
            dovs += "—Ö–∏–ª–ª–∏–Ω–≥—É, "
        len_dovs = len(dovs)
        dovs_accept = dovs[:len_dovs-2]

        dov_users = ', '.join(
            f'<code>@{i}</code>' for i in filter_and_users['users']
        )
        if not args:
            return await self.inline.form(
                self.strings("dov").format(
                    dov_users,
                    filter_and_users['filter'] or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
                    '‚úÖ –ó–∞–ø—É—â–µ–Ω' if self.config["–í–∫–ª/–≤—ã–∫–ª"] else '‚ùé –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    ent.first_name if len(ent.first_name) <= 12  else "–Ω–∏–∫",
                    dovs_accept if dovs_accept != "" else "–≤—Å—ë –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ üëå",
                    pref
                ),
                reply_markup={
                    "text": "–ó–∞–∫—Ä—ã—Ç—å",
                    "callback": self.inline__close,

                },
                message=message,
                disable_security=False
            )
        args = args.split(' ', maxsplit=1)
        if len(args) == 1 and not reply and args[0] != '–ø—É—Å–∫': # 
            return await utils.answer(message, 'ü§î –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?..')
        
        elif args[0] == '—Å–µ—Ç':
            try:
                user_id = args[1]
                if not user_id.isdigit():
                    return await message.reply(
                        self.strings("wrong_id")
                    )

            except Exception:
                user_id = str(reply.sender_id)
            
            if user_id in filter_and_users['users']:
                filter_and_users['users'].remove(user_id)
                return await message.reply(
                    self.strings("user_rm").format(
                        user_id
                    )
                )
            elif user_id not in filter_and_users['users']:
                filter_and_users['users'].append(user_id)
                return await message.reply(
                    self.strings("user_add").format(
                        user_id
                    )
                )

            return self.db.set("NumMod", "numfilter", filter_and_users)
        
        elif args[0] == '–Ω–∏–∫':
            try:
                filter_and_users['filter'] = args[1].lower().strip()
                self.db.set("NumMod", "numfilter", filter_and_users)
                return await message.reply(
                    self.strings("nick_add").format(
                        args[1]
                    )
                )
            except Exception:
                return await message.reply(
                    self.strings("wrong_nick")
                )

        
        elif args[0] == '–ø—É—Å–∫':
            if self.config["–í–∫–ª/–≤—ã–∫–ª"]:
                self.config["–í–∫–ª/–≤—ã–∫–ª"] = False
                return await message.reply(
                    self.strings("dov_stop")
                )

            else:
                self.config["–í–∫–ª/–≤—ã–∫–ª"] = True
                return await message.reply(
                    self.strings("dov_start")
                )

        else:
            return await message.reply(
                self.strings("dov.wrong_args")
            )

    
    async def watcher(self, message):
        if not isinstance(message, telethon.tl.types.Message): return
        filter_and_users = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
        user_id = str(message.sender_id)
        nik = filter_and_users["filter"]
        text = message.raw_text.lower()
        if not nik or not self.config["–í–∫–ª/–≤—ã–∫–ª"] or user_id not in filter_and_users['users']: 
            return

        if not text.startswith(nik): return
        
        if self.config["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º"] == True:  
            if send_mes–∞ := re.search(
                r"(?P<z>–±–µ–π\s|–∫—É—Å[—å–∞–π–Ω–∏]{,3}\s|–∑–∞—Ä–∞–∑–∏[—Ç—å—Ç—å]{,3}\s|–µ–±[–Ω–∏–∞–∂—à—å]{,3}\s|—É–µ–±[–∏–∞–æ—à—Ç—å]{,3}\s|–æ–ø—É—Å—Ç[–∏]{,2}\s|–æ—Ä–≥–∞–Ω–∏–∑—É–π –≥–æ—Ä—è—á–∫—É\s)(?P<lvl>[1-9]?[0]?\s)?(?P<link>@[0-9a-z_]+|(?:https?://)?t\.me/[0-9a-z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))",
                text
            ):
                
                send_mes–∞ = send_mes–∞.groupdict()
                send_mes–∞['link'], send_mes–∞['id'] = '@' + send_mes–∞['id'] if send_mes–∞['id'] else send_mes–∞['link'], ''
                send_mes–∞['z'] = '/–∑–∞—Ä–∞–∑–∏—Ç—å '
                send_mes–∞['lvl'] = send_mes–∞['lvl'] or ''
                mes = ''.join(send_mes–∞.values())
                await message.reply(mes)
###### —á–µ–∫–∏
        if self.config["–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ"] == True:  
            if send_mes := re.search(r"(?P<ch>–∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5} —á–µ–∫[–Ω—É—Ç—å–∏–∞–π]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['ch'] = '+–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
    
    
            elif send_mes := re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['pat'] = '+–ø–∞—Ç–æ–≥–µ–Ω '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<let>–ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5}\s)(?P<lvl>[1-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['let'] = '+–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<kvala>–∫–≤–∞–ª[–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è—É]{,8} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['kvala'] = '+–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<imun>—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|–∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['imun'] = '+–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<sb>—Å–± —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Å–ª—É–∂–±[–∞—É]{,2} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–ª—É–∂–±[–∞—É]{,2}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–±\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['sb'] = '+–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
#### –∫–∞—á    –∞–ª–∫–∏
            elif send_mes := re.search(r"(?P<zar>–∑–∞—Ä–∞–∑[—É–∫–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['zar'] = '++–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['pat'] = '++–ø–∞—Ç–æ–≥–µ–Ω '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<let>–ª–µ—Ç–∞–ª[—É–∫–∞—å–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[1-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['let'] = '++–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<kvala>–∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['kvala'] = '++–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<imun>–∏–º–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}|–∏–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['imun'] = '++–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<sb>—Å–±\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—Å–ª—É–∂–±[–∞—É]{,2}\s)(?P<lvl>[0-5]+)", text):
                send_mes = send_mes.groupdict()
                send_mes['sb'] = '++–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            
        if self.config["–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º"] == True:  
            if re.search(r"–±–æ–ª[–µ–∑—å–Ω–∏]{,5}\b", text):
                await message.reply('/–º–æ–∏ –±–æ–ª–µ–∑–Ω–∏')
        
        if self.config["–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º"] == True:  
            if re.search(r"–∂–µ—Ä—Ç–≤[—ã–∞—É]{,2}|–µ–∂[–∞—É]{,2}", text):
                await message.reply('/–º–æ–∏ –∂–µ—Ä—Ç–≤—ã')

        if self.config["–î–æ—Å—Ç—É–ø –∫ –≤–∏—Ä—É—Å–∞–º"] == True:  
            if re.search(r"-–≤–∏—Ä—É—Å[—ã–∞]{,2}", text):
                await message.reply('-–≤–∏—Ä—É—Å—ã')
            if re.search(r"—É–≤–µ–¥[—ã–∞–æ–º–ª–µ–Ω–∏—è]{,8}", text):
                await message.reply('+–≤–∏—Ä—É—Å—ã')
        
        if self.config["–î–æ—Å—Ç—É–ø –∫ —Ö–∏–ª–ª–∏–Ω–≥—É"] == True:    
            if re.search(r"–≤–∞–∫[—Ü–∏–Ω–∞—É]{,3}|–ª–µ—á[–∏—Å—å]{,2}|—Ö–∏[–ª–ª—å—Å—è–π–∏–Ω–≥]{,2}|–ª–µ–∫[–∞—Ä—Å—Ç–≤–æ]{,2}", text):
                await message.respond('/–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É')
            if re.search(r"—Ü–µ–Ω[–∞—É]{,2}|–≤—á[–µ–∫]{,2}", text):
                await message.reply('<i>–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É</i>')
        
        if self.config["–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ"] == True:
            if re.search(r"" + nik + "%–ª–∞–±[—É–∞]{,2}|/–ª–∞–±[—É–∞]{,2}|#–ª–∞–±[—É–∞]{,2}", text):
                await message.reply('üëá')
                await message.respond('/–º–æ—è –ª–∞–±–∞')


#######################################################
        if self.config["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–ª–∏—Å—Ç—É"] == True:
            if re.search(r"(?P<zarlist>–∑\s)(?P<link>@[0-9a-z_]+|tg://openmessage\?user_id=[0-9]+)",
                text):
                if not text.startswith(f"{nik} –∑") and not text.startswith(nik + "–∑"):
                    return
                infList = self.db.get("NumMod", "infList")
                timezone = "Europe/Kiev"
                vremya = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
                with contextlib.suppress(Exception):
                    text_list = text.split(' ', maxsplit=2)    
                if text_list[2] in infList:
                    user = infList[text_list[2]]
                    await message.reply(
                        self.strings("search").format(
                            text_list[2], user[0], user[1]
                        )
                    )
                if text_list[2] not in infList:
                    await message.reply(
                        self.strings("nf")
                    )
                else:
                    return
            if re.search(r"–∑", text):
                if text != f"{nik} –∑" and text != f"{nik}–∑":
                    return
                reply = await message.get_reply_message()
                infList = self.db.get("NumMod", "infList")
                timezone = "Europe/Kiev"
                vremya = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
                try:
                    rid = '@' + str(reply.sender_id)
                except AttributeError: pass
                if not reply:
                    return
                if rid in infList:
                    user = infList[rid]
                    await message.reply(
                        self.strings("search").format(
                            rid, user[0], user[1]
                        )
                    )              
                        
                elif rid not in infList:
                        await message.reply(
                            self.strings("nf")
                        )  
                else:
                    return
#######################################################

###     
    async def –≥cmd(self, message):
        " [arg] [arg] [arg]....\n–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /–∏–¥ –ø–æ —Ä–µ–ø–ª–∞—é\n –ê—Ä–≥—É–º–µ–Ω—Ç–æ–º —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞ –∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏. "
        reply = await message.get_reply_message()
        
        count_st = 0
        count_hf = 0
        if not reply:
            await message.reply(
                self.strings("not_reply")
            )
            return

        args = utils.get_args_raw(message)
        list_args=[]
        if not args:
            await message.reply(
                self.strings("not_args")
            )
            return
        a = reply.text
        for i in args.split(' '):
            if '-' in i:
                ot_do = i.split('-')
                try:
                    for x in range(int(ot_do[0]),int(ot_do[1])+1):
                        list_args.append(str(x))
                except:
                    await message.reply(
                        self.strings("ot_do")
                    )
                    return
            else:
                list_args.append(i)
        lis = []
        for i in a.splitlines():
            lis.append(i)
        for start in list_args:
            for x in lis:
                if x.lower().startswith(str(start.lower())):
                    count_st = 1
                    if 'href="' in x:
                        count_hf = 1
                        b=x.find('href="')+6
                        c=x.find('">')
                        link = x[b:c]
                        if link.startswith('tg'):
                            list = []
                            for i in link.split('='):
                                list.append(i)
                            await message.reply(f'/id <code>@{list[1]}</code>'
                            )
                            break
                        elif link.startswith('https://t.me'):
                            a ='@' + str(link.split('/')[3])
                            await message.reply(f'/id <code>{a}</code>'
                            )
                            break
                        else:
                            await message.reply(
                                self.strings("hueta")
                            )
                            break
            await asyncio.sleep(3)
        if not count_st:
            await message.reply(
                self.strings("no_sargs")
            )
        elif not count_hf:
            await message.reply(
                self.strings("nolink")
            )
        elif len(list_args) >= 5:
            await message.respond(
                self.strings("tids")
            )
            await asyncio.sleep(3.3)

    async def –∏cmd(self, message):
        """–ß–µ–∫–∞–µ—Ç –≤—Å–µ –∞–π–¥–∏ –ø–æ —Ä–µ–ø–ª–∞—é.\n–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å @id/@user/link"""
        reply = await message.get_reply_message()
        exlist = self.db.get("NumMod", "exUsers")
        if not reply:
            await message.reply(
                self.strings("not_reply")
            )
            return
  
        for i in range(len(reply.entities)):
            try:
                json = JSON.loads(reply.to_json())
                link = json["entities"][i]["url"]
                if link.startswith('tg'):
                    users = '@' + link.split('=')[1]
                    if users in exlist:
                        await message.reply(f'/id <code>{users}</code>')
                    else:
                        await message.reply(f'/id <code>{users}</code>')
                elif link.startswith('https://t.me'):
                    a = '@' 
                    if a in exlist:
                        await message.reply(f'/id <code>{a}</code>')
                    else:
                        await message.reply(f'/id <code>{a}</code>')
                else:
                    await message.reply('ü§î –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –µ–±–∞–Ω–Ω—ã–µ –∏–¥—ã')
            except Exception:
                await message.reply("/id " + '<code>' + reply.raw_text[
                                              json["entities"][i]["offset"]:json["entities"][i]["offset"] +
                                                                            json["entities"][i]["length"]] + '</code>')
            await asyncio.sleep(3.3)
        await message.delete()
    
    async def –±cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –±–∏–æ—Ç–æ–ø—ã/–∂–µ—Ä—Ç–≤—ã –∏ —Ç.–ø"""
        bt, bch, bk, btz, bchz, ezha, bol = "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:","üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ë–ï–°–ï–î–´ –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:","üî¨ –¢–û–ü –ö–û–†–ü–û–†–ê–¶–ò–ô –ü–û –ó–ê–†–ê–ñ–ï–ù–ò–Ø–ú:","üî¨ –¢–û–ü –ë–û–õ–ï–ó–ù–ï–ô:","üî¨ –¢–û–ü –ë–û–õ–ï–ó–ù–ï–ô –ë–ï–°–ï–î–´:","ü¶† –°–ø–∏—Å–æ–∫ –±–æ–ª—å–Ω—ã—Ö –≤–∞—à–∏–º –ø–∞—Ç–æ–≥–µ–Ω–æ–º:","ü§í –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π:"
        reply = await message.get_reply_message()
        if not reply:
            await message.edit(
                self.strings("not_reply")
               )
            return
        a = reply.text
        sms = ''
        if "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ë–ï–°–ï–î–´" in a:
            sms += "ü•∞ —Ç–æ–ø –≤–∫—É—Å–Ω—è—à–µ–∫ —á–∞—Ç–∞:\n"
            
        if "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û" in a:
            sms += "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:\n"

        if bt not in a and bch not in a and bk not in a and btz not in a and bchz not in a and ezha not in a and bol not in a:
            await message.respond(
                self.strings("hueta")
            )
            return 
        b = reply.raw_text.splitlines() 
        b.pop(0)
        hh = []
        for i in b:
            try:
                hh.append(i.split('|')[1])
            except: pass
        json = JSON.loads(reply.to_json())
        
        count = 1
        for i in range(0, len(reply.entities) ):
            try:
                exp = hh[i]
            except:
                exp = i
            link = json["entities"][i]["url"]
            try:
                if link.startswith('tg'):
                    bla = []
                    for i in link.split('='):
                        bla.append(i)
                    b = await message.client.get_entity(int(bla[1]))
                    
                    b_first_name = utils.validate_html(b.first_name)
                    
                    sms += f'{str(count)}. <b>{b_first_name}</b> - <code>@{b.id}</code> | <u>{exp}</u>\n'
                
                elif link.startswith('https://t.me'):
                    a = '@' + str(link.split('/')[3])
                    sms += f'{str(count)}. <code>{a}</code> | <u>{result}</u>\n'
                else:
                    sms += f'{str(count)}. —á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?\n'
            except:
                if link.startswith('https://t.me'):
                    a ='@' + str(link.split('/')[3])
                    sms += f'{str(count)}. <code>{a}</code> | <u>{exp}</u> \n'
                elif link.startswith('tg'):
                    bla = []
                    for i in link.split('='):
                        bla.append(i)
                    sms += f'{str(count)}. <b>??????</b> - <code>@{bla[1]}</code> | <u>{exp}</u> \n'
            count += 1

        await self.inline.form(
            sms,
            reply_markup={
                            "text": f"üîª Close",
                            "callback": self.inline__close,
            },
            message=message,
            disable_security=False
        )   
### –ø–æ–º–æ—â—å
    async def biohelpcmd(self, message: Message):
        """–í—ã–¥–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é"""
        pref = self.get_prefix()
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message(
        )
        if not args:
            await self.inline.form(
                self.strings("guide").format(
                        pref
                ),
                reply_markup={
                                "text": "–ó–∞–∫—Ä—ã—Ç—å",
                                "callback": self.inline__close,
                },
            message=message,
            disable_security=False
            )
#######################   
        if '–¥–æ–≤' in args:
            nnik = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
            nik = nnik['filter'] or '–Ω–∏–∫' 
            await self.inline.form(
                self.strings("guidedov").format(
                    nik, pref
                ),
                reply_markup={
                    "text": "–ó–∞–∫—Ä—ã—Ç—å",
                    "callback": self.inline__close,

                },
                message=message,
                disable_security=False
            )   

    async def inline__close(self, call) -> None:
        await call.delete()

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ",
                False,
                "–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ",
                False,
                "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ –Ω–∞–≤—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–ª–∏—Å—Ç—É",
                False,
                "–î–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),

            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –≤–∏—Ä—É—Å–∞–º",
                False,
                "–î–æ—Å—Ç—É–ø –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∏—Ä—É—Å–æ–≤ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ —Ö–∏–ª–ª–∏–Ω–≥—É",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –ø–æ–∫—É–ø–∫–µ –≤–∞–∫—Ü–∏–Ω—ã",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–í–∫–ª/–≤—ã–∫–ª",
                False,
                "–í–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∫–∏"
                "\n‚ùóÔ∏è –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö Num'–º–æ–¥—É–ª—è—Ö.",
                validator=loader.validators.Boolean(),
            )
        )