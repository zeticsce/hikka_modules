# modded by @enicaaa & blyat kak suda popal @Yahikoro.
# meta developer of NumMod: @trololo_1
from .. import loader, utils  # noqa
import asyncio
import contextlib
import pytz
import re
import telethon
from telethon.tl.types import MessageEntityTextUrl
import json as JSON
from datetime import datetime, date, time
import logging
logger = logging.getLogger(__name__)

# meta developer: @zeticsce
# –æ–±–ª–µ–≥—á–∏—Ç –∂–∏–∑–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —é–∑–µ—Ä–±–æ—Ç–æ–≤. Moded by @enicaaa , @Yahikoro



@loader.tds
class ABCDEMod(loader.Module):
    """26 –∫–∏–ª–æ–±–∞–π—Ç —Å—á–∞—Å—Ç—å—è)"""

    strings = {
        "name": "abcde"
    
    }


    async def client_ready(self, client, db):
        self.db = db
        self.client = client #IDS
        if not self.db.get("NumMod", "exUsers", False):
            self.db.set("NumMod", "exUsers", [])
        if not self.db.get("NumMod", "infList", False):
            self.db.set("NumMod", "infList", {})


###################################


        
    
    async def actions(self, reply, args):
        if reply:
            user_id = reply.sender_id
            return {
                "user_id": user_id,
                "firstname": (
                    await self.client.get_entity(user_id)
                ).first_name
            }
        elif len(args) == 1:
            if args[0].isdigit():
                args[0] = int(args[0])
            entity = await self.client.get_entity(args[0])
            return {
                "user_id": entity.id,
                "firstname": entity.first_name
            }
    
    async def –∞–πcmd(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–ø–ª–∞—é –∏ –ø–æ —Ç–µ–≥—É"""
        reply = await message.get_reply_message()
        args = utils.get_args(message)
        user_info = await self.actions(reply, args)
        if not isinstance(user_info, dict):
            return await utils.answer(message, "<b>üÜî My ID: @1136703023</b>")
        await utils.answer(
            message,
            "<b>ü•∑üèªName:</b> <a href='tg://openmessage?user_id={}'>{}</a>\n<b>üÜî:</b> <code>@{}</code>".format(
                user_info["user_id"], user_info["firstname"], user_info["user_id"]
            )
        )

###################################

    async def –∑cmd(self, message):
        " [arg] [arg] [arg]....\n –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏."
        reply = await message.get_reply_message()
        a = reply.text
        exlist = self.db.get("NumMod", "exUsers")
        count_st = 0
        count_hf = 0
        if not reply:
            await message.edit('–Ω–µ—Ç —Ä–µ–ø–ª–∞—è.')
            return
        args = utils.get_args_raw(message)
        list_args = []
        if not args:
            await message.edit('–Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤')
            return
        for i in args.split(' '):
            if '-' in i:
                ot_do = i.split('-')
                try:
                    list_args.extend(str(x) for x in range(int(ot_do[0]), int(ot_do[1]) + 1))
                except Exception:
                    await message.respond('–∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏—é "–æ—Ç-–¥–æ"')
                    return
            else:
                list_args.append(i)
        lis = a.splitlines()
        for start in list_args:
            for x in lis:
                if x.lower().startswith(str(start.lower())):
                    count_st = 1
                    if 'href="' in x:
                        count_hf = 1
                        b = x.find('href="') + 6
                        c = x.find('">')
                        link = x[b:c]
                        if link.startswith('tg'):
                            users = '@' + link.split('=')[1]
                            if users in exlist:
                                await message.reply(f'–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: <code>{users}</code>')
                            else:
                                await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {users}')
                        elif link.startswith('https://t.me'):
                            a = '@' + str(link.split('/')[3])
                            if a in exlist:
                                await message.reply(f'–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: <code>{a}</code>')
                            else:
                                await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {a}')
                        else:
                            await message.reply('—á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?')
                        break
            await asyncio.sleep(3)

        if not count_st:
            await message.edit('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.')

        elif not count_hf:
            await message.edit('—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

        elif len(list_args) >= 3:
            await message.respond('–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')
            await asyncio.sleep(3)
            await message.delete()

    async def –æcmd(self, message):
        """–∑–∞—Ä–∞–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–æ —Ä–µ–ø–ª–∞—é."""
        reply = await message.get_reply_message()
        exlist = self.db.get("NumMod", "exUsers")
        if not reply:
            await message.edit('–Ω–µ—Ç —Ä–µ–ø–ª–∞—è.')
            return
        json = JSON.loads(reply.to_json())
        for i in range(len(reply.entities)):
            try:
                link = json["entities"][i]["url"]
                if link.startswith('tg'):
                    users = '@' + link.split('=')[1]
                    if users in exlist:
                        await message.reply(f'–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: <code>{users}</code>')
                    else:
                        await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {users}')
                elif link.startswith('https://t.me'):
                    a = '@' 
                    if a in exlist:
                        await message.reply(f'–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: <code>{a}</code>')
                    else:
                        await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {a}')
                else:
                    await message.reply('—á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?')
            except Exception:
                await message.reply("/–∑–∞—Ä–∞–∑–∏—Ç—å " + reply.raw_text[
                                                  json["entities"][i]["offset"]:json["entities"][i]["offset"] +
                                                                                json["entities"][i]["length"]])
            await asyncio.sleep(3)
        

    async def –∏—Å–∫cmd(self, message):
        """–¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –º–æ–¥—É–ª—å.\n–∏—Å–ø–æ–ª—å–∑—É–π: .exnum {@user/@id}"""
        args = utils.get_args_raw(message)
        exlistGet = self.db.get("NumMod", "exUsers")
        exlist = exlistGet.copy()
        if not args:
            if len(exlist) < 1:
                await message.edit('—Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.')
                return
            exsms = ''.join(f'<b>{count}.</b> <code>{i}</code>\n' for count, i in enumerate(exlist, start=1))
            await utils.answer(message, exsms)
            return
        if args == 'clear':
            exlist.clear()
            self.db.set("NumMod", "exUsers", exlist)
            await message.edit('—Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –æ—á–∏—Å—Ç–µ–Ω.')
            return
        if len(args.split(' ')) > 1 or args[0] != '@':
            await message.edit(
                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ <b>–±–æ–ª—å—à–µ</b> –æ–¥–Ω–æ–≥–æ, –ª–∏–±–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è <b>–Ω–µ</b> —Å–æ –∑–Ω–∞–∫–∞ <code>@</code>'
            )
            return
        if args in exlist:
            exlist.remove(args)
            self.db.set("NumMod", "exUsers", exlist)
            await message.edit(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args}</code> –∏—Å–∫–ª—é—á–µ–Ω.')
            return
        exlist.append(args)
        self.db.set("NumMod", "exUsers", exlist)
        await message.edit(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.')

    async def –∑–∞—Äcmd(self, message):
        """ –ª–∏—Å—Ç –≤–∞—à–∏—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π.\n.–∑–∞—Ä {@id/user} {count} {args}\n–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: .–∑–∞—Ä {@id/user}\n–∞—Ä–≥—É–º–µ–Ω—Ç—ã:\n–∫ -- –¥–æ–±–∞–≤–∏—Ç—å –±—É–∫–≤—É k(—Ç—ã—Å—è—á) –∫ —á–∏—Å–ª—É.\n—Ñ -- –ø–æ–∏—Å–∫ –ø–æ –∏–¥'—É/—é–∑–µ—Ä—É.\n—Ä -- –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ —Ä–µ–ø–ª–∞—é. """
        args = utils.get_args_raw(message)
        infList = self.db.get("NumMod", "infList")
        timezone = "Europe/Kiev"
        vremya = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
        with contextlib.suppress(Exception):
            args_list = args.split(' ')
        if not args:
            if not infList:
                await utils.answer(message, "‚ùå–°–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç.")

                return
            sms = ''.join(
                f'<b>‚Ä¢ <code>{key}</code>  <code>{value[0]}</code> [<i>{value[1]}</i>]</b>\n' for key, value in
                infList.items())
            
            await utils.answer(message, sms)
            return
        if '—Ä' in args.lower():
            reply = await message.get_reply_message()
            if not reply:
                return await utils.answer(message, '—Ä–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
            elif reply.sender_id != 707693258 and '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' not in reply.text:
                return await utils.answer(message, '—Ä–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
            else:  # ‚ò£
                text = reply.text
                x = text.index('‚ò£') + 4
                count = text[x:].split(' ', maxsplit=1)[0]
                x = text.index('user?id=') + 8
                user = '@' + text[x:].split('"', maxsplit=1)[0]
                infList[user] = [str(count), vremya]
                self.db.set("NumMod", "infList", infList)
                await utils.answer(
                    message,
                    f"‚úÖ –ñ–µ—Ä—Ç–≤–∞ <b><code>{user}</code></b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫.\n"
                    
                    f"<b>‚ò£Ô∏è {count}</b> –±–∏–æ-–æ–ø—ã—Ç–∞."

                    
                )
        elif args_list[0] == "clear":
            infList.clear()
            self.db.set("NumMod", "infList", infList)
            await utils.answer(

                message,
            f"‚úÖ –ó–∞—Ä–ª–∏—Å—Ç <b>–æ—á–∏—â–µ–Ω</b>."
            )

        elif args_list[0] in infList and '—Ñ' in args.lower():
            user = infList[args_list[0]]
            await utils.answer(message,
                
                f"‚úÖ –ñ–µ—Ä—Ç–≤–∞ <code>{args_list[0]}</code> –ø—Ä–∏–Ω–æ—Å–∏—Ç:\n"
                f"<b>‚ò£Ô∏è {user[0]} –±–∏–æ-–æ–ø—ã—Ç–∞.</b>\n"
                f"üìÜ –î–∞—Ç–∞: <i>{user[1]}</i>"
            )
        elif len(args_list) == 1 and args_list[0] in infList:
            infList.pop(args_list[0])
            self.db.set("NumMod", "infList", infList)
            await utils.answer(
                
                message, 
                f"‚ùå –ñ–µ—Ä—Ç–≤–∞ <b><code>{args}</code></b> —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
        elif args_list[0][0] != '@':
            await utils.answer(message,
            
            f'ü•± –í—ã –≤–≤–µ–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
            )
        else:
            try:
                user, count = str(args_list[0]), float(args_list[1])
            except Exception:
                await utils.answer(message, 
                    
                    f"‚ùé –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ."
                    )
                return
            k = ''
            if '–∫' in args.lower():
                k += 'k'
            infList[user] = [str(count) + k, vremya]
            self.db.set("NumMod", "infList", infList)
            await utils.answer(
                message,
                f"‚úÖ –ñ–µ—Ä—Ç–≤–∞ <b><code>{user}</code></b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫.\n"
                
                f"<b>‚ò£Ô∏è {count}{k}</b> –±–∏–æ-–æ–ø—ã—Ç–∞."
            )

    async def –¥–æ–≤cmd(self, message):
        """ {args1} {args2 OR reply} \n–≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã."""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        filter_and_users = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
        if not args:
            return await utils.answer(
                message,
                f"—Å–µ—Ç --- –¥–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–æ–≤(–Ω–µ –±–æ–ª—å—à–µ 20), –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä(–∏–¥|—Ä–µ–ø–ª–∞–π).\n"
                f"[{', '.join([f'<code>{i}</code>' for i in filter_and_users['users']])}]\n"
                f"–Ω–∏–∫ --- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä. –¥–æ–ø—É—Å—Ç–∏–º –æ–¥–∏–Ω.\n"
                f"<code>{filter_and_users['filter'] or '‚ùå–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'}</code>\n"
                f"–ø—É—Å–∫ --- –∑–∞–ø—É—Å—Ç–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.\n"
                f"<b>{'‚úÖ–∑–∞–ø—É—â–µ–Ω' if filter_and_users['status'] else '‚ùå–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}.</b>\n\n"
                f"<b>—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫:</b>\n"
                f"[—Ñ–∏–ª—å—Ç—Ä] (–µ–±–∏|–µ–±|–±–µ–π|–∫—É—Å—å|–∫—É—Å–∞–π|—É–µ–±–∏|–∑–∞—Ä–∞–∑–∏|–∑–∞—Ä–∞–∑–∏—Ç—å) (1-10) ((@id|user)|link(–¥–∞–∂–µ –ø–æ–ª–Ω—ã–π –ª–∏–Ω–∫ –∏–¥'–∞))\n"
                f"[—Ñ–∏–ª—å—Ç—Ä] –≤–∞–∫—Ü–∏–Ω[–∞—É]|–ª–µ—á–∏—Å—å|–≤–∞[–∫–∫—Ü]|—Ö–∏[–ª–ª—å—Å—è–π–∏–Ω–≥]\n"
                f"[—Ñ–∏–ª—å—Ç—Ä] –∂–µ—Ä—Ç–≤—ã|–µ–∂–∞\n"
                f"[—Ñ–∏–ª—å—Ç—Ä] –±–æ–ª–µ–∑–Ω–∏|–±–æ–ª\n"
                f"[—Ñ–∏–ª—å—Ç—Ä] —Ü–µ–Ω[–∞–∑]\n"
                f"[—Ñ–∏–ª—å—Ç—Ä] –ª–∞–±[—É–∞]|—Å—Ç–∞—Ç—ã\n"
                f"<b>–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤:</b>\n"
                f"[—Ñ–∏–ª—å—Ç—Ä] (–Ω–∞–≤—ã–∫) (0-5)\n"
                f"–Ω–∞–ø—Ä–∏–º–µ—Ä:[—Ñ–∏–ª—å—Ç—Ä] –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è 4 (—É–ª—É—á—à–∞–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —É—á—ë–Ω–Ω—ã—Ö –Ω–∞ 4 —É—Ä.\n" 
                f"–∏–ª–∏ [—Ñ–∏–ª—å—Ç—Ä] –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ–∫ 4 (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—á—ë–Ω–Ω—ã—Ö –Ω–∞ 4 —É—Ä.\n"     
                f"–¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:\n"
                f"<code>–ø–∞—Ç–æ–≥–µ–Ω(–ø–∞—Ç—ã)</code>|<code>–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è(–∫–≤–∞–ª–∞)</code>|<code>–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å(–∑–∑)</code>|<code>–∏–º–º—É–Ω–∏—Ç–µ—Ç(–∏–º–º—É–Ω)</code>|<code>–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å(–ª–µ—Ç–∞–ª)</code>|<code>–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å(—Å–±)</code>\n"
                f"–ò–≥–Ω–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞!!"
            )
        args = args.split(' ', maxsplit=1)
        if len(args) == 1 and not reply and args[0] != '–ø—É—Å–∫':
            return await utils.answer(message, 'ü§î –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?..')
        elif args[0] == '—Å–µ—Ç':
            try:
                user_id = args[1]
                if not user_id.isdigit():
                    return await utils.answer(message, 'üëÄ –ü—Ä–∞–≤–∏–ª—å–Ω–æ üÜî –≤–≤–µ–¥–∏, –¥—É–±–∏–Ω–∞.')
            except Exception:
                user_id = str(reply.sender_id)
            if user_id in filter_and_users['users']:
                filter_and_users['users'].remove(user_id)
                await utils.answer(message, f"‚úÖ –°–∞–ø–ø–æ—Ä—Ç <code>{user_id}</code> —É–¥–∞–ª—ë–Ω.")
            elif len(filter_and_users['users']) <= 20:
                filter_and_users['users'].append(user_id)
                await utils.answer(message, f"‚úÖ –°–∞–ø–ø–æ—Ä—Ç <code>{user_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                return await utils.answer(message, '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 20 —á–µ–ª–æ–≤–µ–∫.')
            return self.db.set("NumMod", "numfilter", filter_and_users)
        elif args[0] == '—Ñ–∏–ª—å—Ç—Ä':
            try:
                filter_and_users['filter'] = args[1].lower().strip()
                self.db.set("NumMod", "numfilter", filter_and_users)
                return await utils.answer(message, f"‚úÖ –ù–∏–∫ <code>{args[1]}</code> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            except Exception:
                return await utils.answer(message, "<b>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫.</b>")
        elif args[0] == '–ø—É—Å–∫':
            if filter_and_users['status']:
                filter_and_users['status'] = False
                self.db.set("NumMod", "numfilter", filter_and_users)
                return await utils.answer(message, "<b>‚ùé –£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</b>")
            else:
                filter_and_users['status'] = True
                self.db.set("NumMod", "numfilter", filter_and_users)
                return await utils.answer(message, "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</b>")
        else:
            return await utils.answer(
            message,
            f"<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.</b>\n"
            f"<i>üìù –í–≤–µ–¥–∏—Ç–µ <code>.–¥–æ–≤</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.</i>"
            )

    async def watcher(self, message):
        if not isinstance(message, telethon.tl.types.Message): return
        filter_and_users = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
        user_id = str(message.sender_id)
        if not filter_and_users['filter'] or not filter_and_users['status'] or user_id not in filter_and_users[
            'users'] or message.is_private: return
        text = message.raw_text.lower()
        if not text.startswith(filter_and_users['filter']): return

        if send_mes–∞ := re.search(
                r"(?P<z>–±–µ–π\s|–∫—É—Å—å\s|–∫—É—Å–∞–π\s|–∑–∞—Ä–∞–∑–∏\s|–∑–∞—Ä–∞–∑–∏—Ç—å\s|–µ–±\s|–µ–±–∏\s|—É–µ–±–∏\s{,2}\s)(?P<lvl>[1-9]?[0]?\s)?(?P<link>@[0-9a-z_]+|(?:https?://)?t\.me/[0-9a-z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))",
                text):
            send_mes–∞ = send_mes–∞.groupdict()
            send_mes–∞['link'], send_mes–∞['id'] = '@' + send_mes–∞['id'] if send_mes–∞['id'] else send_mes–∞['link'], ''
            send_mes–∞['z'] = '–∑–∞—Ä–∞–∑–∏—Ç—å '
            send_mes–∞['lvl'] = send_mes–∞['lvl'] or ''
            mes = ''.join(send_mes–∞.values())
            await message.respond(mes)

        elif send_mesz := re.search(r"(?P<zar>–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å\s|–∑–∑\s)(?P<lvl>[0-5]+)", text):
            send_mesz = send_mesz.groupdict()
            send_mesz['zar'] = '++–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
            send_mesz['lvl'] = send_mesz['lvl'] or ''
            mes = ''.join(send_mesz.values())
            await message.respond(mes)

        elif send_mesz := re.search(r"(?P<zar>–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å —á–µ–∫\s|–∑–∑ —á–µ–∫\s)(?P<lvl>[0-5]+)", text):
            send_mesz = send_mesz.groupdict()
            send_mesz['zar'] = '+–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
            send_mesz['lvl'] = send_mesz['lvl'] or ''
            mes = ''.join(send_mesz.values())
            await message.respond(mes)

        elif send_mesp := re.search(r"(?P<pat>–ø–∞—Ç–æ–≥–µ–Ω\s|–ø–∞—Ç—ã\s)(?P<lvl>[0-5]+)", text):
            send_mesp = send_mesp.groupdict()
            send_mesp['pat'] = '++–ø–∞—Ç–æ–≥–µ–Ω '
            send_mesp['lvl'] = send_mesp['lvl'] or ''
            mes = ''.join(send_mesp.values())
            await message.respond(mes)

        elif send_mesp := re.search(r"(?P<pat>–ø–∞—Ç–æ–≥–µ–Ω —á–µ–∫\s|–ø–∞—Ç—ã —á–µ–∫\s)(?P<lvl>[0-5]+)", text):
            send_mesp = send_mesp.groupdict()
            send_mesp['pat'] = '+–ø–∞—Ç–æ–≥–µ–Ω '
            send_mesp['lvl'] = send_mesp['lvl'] or ''
            mes = ''.join(send_mesp.values())
            await message.respond(mes)

        elif send_mesl := re.search(r"(?P<let>–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å\s|–ª–µ—Ç–∞–ª\s)(?P<lvl>[1-5]+)", text):
            send_mesl = send_mesl.groupdict()
            send_mesl['let'] = '++–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
            send_mesl['lvl'] = send_mesl['lvl'] or ''
            mes = ''.join(send_mesl.values())
            await message.respond(mes)

        elif send_mesl := re.search(r"(?P<let>–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å —á–µ–∫\s|–ª–µ—Ç–∞–ª —á–µ–∫\s)(?P<lvl>[1-5]+)", text):
            send_mesl = send_mesl.groupdict()
            send_mesl['let'] = '+–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
            send_mesl['lvl'] = send_mesl['lvl'] or ''
            mes = ''.join(send_mesl.values())
            await message.respond(mes)

        elif send_mesk := re.search(r"(?P<kvala>–∫–≤–∞–ª–∞\s|–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è\s)(?P<lvl>[0-5]+)", text):
            send_mesk = send_mesk.groupdict()
            send_mesk['kvala'] = '++–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
            send_mesk['lvl'] = send_mesk['lvl'] or ''
            mes = ''.join(send_mesk.values())
            await message.respond(mes)

        elif send_mesk := re.search(r"(?P<kvala>–∫–≤–∞–ª–∞ —á–µ–∫\s|–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ–∫\s)(?P<lvl>[0-5]+)", text):
            send_mesk = send_mesk.groupdict()
            send_mesk['kvala'] = '+–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
            send_mesk['lvl'] = send_mesk['lvl'] or ''
            mes = ''.join(send_mesk.values())
            await message.respond(mes)

        elif send_mesi := re.search(r"(?P<imun>–∏–º–º—É–Ω\s|–∏–º–º—É–Ω–∏—Ç–µ—Ç\s)(?P<lvl>[0-5]+)", text):
            send_mesi = send_mesi.groupdict()
            send_mesi['imun'] = '++–∏–º–º—É–Ω–∏—Ç–µ—Ç '
            send_mesi['lvl'] = send_mesi['lvl'] or ''
            mes = ''.join(send_mesi.values())
            await message.respond(mes)

        elif send_mesi := re.search(r"(?P<imun>–∏–º–º—É–Ω —á–µ–∫\s|–∏–º–º—É–Ω–∏—Ç–µ—Ç —á–µ–∫\s)(?P<lvl>[0-5]+)", text):
            send_mesi = send_mesi.groupdict()
            send_mesi['imun'] = '+–∏–º–º—É–Ω–∏—Ç–µ—Ç '
            send_mesi['lvl'] = send_mesi['lvl'] or ''
            mes = ''.join(send_mesi.values())
            await message.respond(mes)

        elif send_mesb := re.search(r"(?P<sb>—Å–±\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\s)(?P<lvl>[0-5]+)", text):
            send_mesb = send_mesb.groupdict()
            send_mesb['sb'] = '++–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
            send_mesb['lvl'] = send_mesb['lvl'] or ''
            mes = ''.join(send_mesb.values())
            await message.respond(mes)

        elif send_mesb := re.search(r"(?P<sb>—Å–± —á–µ–∫\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–µ–∫\s)(?P<lvl>[0-5]+)", text):
            send_mesb = send_mesb.groupdict()
            send_mesb['sb'] = '+–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
            send_mesb['lvl'] = send_mesb['lvl'] or ''
            mes = ''.join(send_mesb.values())
            await message.respond(mes)

        if re.search(r"–±–æ–ª–µ–∑–Ω–∏|–±–æ–ª", text):
            await message.respond('/–º–æ–∏ –±–æ–ª–µ–∑–Ω–∏')
        if re.search(r"–∂–µ—Ä—Ç[–≤—ã–∞]|–µ–∂–∞", text):
            await message.respond('/–º–æ–∏ –∂–µ—Ä—Ç–≤—ã')
        if re.search(r"—Å—Ç–∞—Ç—ã|–ª–∞–±[—É–∞]{,2}", text):
            await message.respond('/–ª–∞–±')
        if re.search(r"—Ü–µ–Ω[–∞–∑]{,2}", text):
            await message.respond('–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É')
        
        if re.search(r"–ø–æ—Å—Ç–∞–≤—å –≤–∏—Ä—É—Å—ã|—É–≤–µ–¥—ã", text):
            await message.respond('+–≤–∏—Ä—É—Å—ã')
        if re.search(r"—É–±–µ—Ä–∏ –≤–∏—Ä—É—Å—ã", text):
            await message.respond('-–≤–∏—Ä—É—Å—ã')
        elif re.search(r"–≤–∞–∫—Ü–∏–Ω[–∞—É]|–≤–∞[–∫–∫—Ü]|–ª–µ—á–∏—Å—å|—Ö–∏[–ª–ª—å—Å—è–π–∏–Ω–≥]{,2}", text):
            await message.respond('/–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É')
        
            


    async def –≥cmd(self, message):
        " [arg] [arg] [arg]....\n–í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞. –∏–ª–∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏."
        reply = await message.get_reply_message()
        a = reply.text
        count_st = 0
        count_hf = 0
        if not reply:
            await message.respond('–ù–µ—Ç —Ä–µ–ø–ª–∞—è.')

            return
        args = utils.get_args_raw(message)
        list_args=[]
        if not args:
            await message.edit('–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤')
            return
        await message.delete()
        for i in args.split(' '):
            if '-' in i:
                ot_do = i.split('-')
                try:
                    for x in range(int(ot_do[0]),int(ot_do[1])+1):
                        list_args.append(str(x))
                except:
                    await message.respond('–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏—é "–æ—Ç-–¥–æ"')
                    return
            else:
                list_args.append(i)
        lis = []
        for i in a.splitlines():
            lis.append(i)
        for start in list_args:
            for x in lis:
                if x.lower().startswith(str(start.lower())):
                    count_st = 1
                    if 'href="' in x:
                        count_hf = 1
                        b=x.find('href="')+6
                        c=x.find('">')
                        link = x[b:c]
                        if link.startswith('tg'):
                            list = []
                            for i in link.split('='):
                                list.append(i)
                            await message.reply(f'<b>ÔΩ•</b> <code>–ó–∞—Ä–∞–∑–∏—Ç—å 10 @{list[1]}</code>\n\n'
                                                f'<b>User:</b> <code>@{list[1]}</code>\n\n'
                            
                            )
                            break
                        elif link.startswith('https://t.me'):
                            a ='@' + str(link.split('/')[3])
                            await message.reply(f'<b>ÔΩ•</b> <code>–ó–∞—Ä–∞–∑–∏—Ç—å 10 {a}</code>\n\n'
                                                f'<b>User:</b> <code>{a}</code>\n\n'
                            
                            
                            )
                            break
                        else:
                            await message.reply('—á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?')
                            break
            await asyncio.sleep(3)
                
        if not count_st:
            await message.edit('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.')
            
        elif not count_hf:
            await message.edit('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏.')
            
        elif len(list_args) >= 3:
            await message.respond('<b>–ò–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.</b>')
            
    async def –∏cmd(self, message):
        "–ß–µ–∫–∞–µ—Ç –∏–¥ –ø–æ —Ä–µ–ø–ª–∞—é."
        reply = await message.get_reply_message()
        json = JSON.loads(reply.to_json())
        for i in range(0, len(reply.entities) ):
            try:
                link = json["entities"][i]["url"]
                if link.startswith('tg'):
                    list = []
                    for i in link.split('='):
                        list.append(i)
                    await message.reply('.–∏–¥ @' + list[1])
                elif link.startswith('https://t.me'):
                    a ='@' + str(link.split('/')[3])
                    
                            
                    await message.reply(f'.–∏–¥ {a}')
                else:
                    await message.reply('—á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?')
            except:
                await message.reply(".–∏–¥ " + reply.raw_text[json["entities"][i]["offset"]:json["entities"][i]["offset"]+json["entities"][i]["length"]] )
            await asyncio.sleep(3)